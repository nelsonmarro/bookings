package templates

import (
"github.com/axzilla/templui/component/alert"
"github.com/axzilla/templui/component/button"
"github.com/axzilla/templui/component/datepicker"
"github.com/axzilla/templui/component/form"
"github.com/axzilla/templui/icon"
"github.com/nelsonmarro/bookings/internal/models"
)

templ headReservation() {
<title>Make Reservations</title>
}

templ scriptsReservation() {
<script src="/static/js/reservations.js" defer></script>
}

type ReservationPageVM struct {
models.ReservationCheck
FormErrors map[string]string
CSRFToken string
}

templ ReservationPage(vm *ReservationPageVM) {
@MainLayout(headContact(), scriptsReservation()) {
<div class="flex flex-row justify-center items-center py-5">
  <div class="w-3/4 h-[690px]">
    <div>
      <h1 class="text-3xl font-bold text-center mt-4">Search for Availability</h1>
      <div class="w-full">
        <form method="POST" action="/reservation" class="flex flex-col space-y-4">
          <input type="hidden" name="csrf_token" value={ vm.CSRFToken } />
          @form.Item() {
          @form.Label(form.LabelProps{
          For: "startdate",
          }) {
          Start Date
          }
          @datepicker.DatePicker(datepicker.Props{
          HasError: false,
          ID: "startdate",
          Name: "startdate",
          Value: vm.StartDate,
          })
          if vm.FormErrors["startdate"] != "" {
          @form.Message(form.MessageProps{
          Variant: form.MessageVariantError,
          }) {
          Select a valid date
          }
          }
          }
          @form.Item() {
          @form.Label(form.LabelProps{
          For: "enddate",
          }) {
          End Date
          }
          @datepicker.DatePicker(datepicker.Props{
          ID: "enddate",
          Name: "enddate",
          Value: vm.EndDate,
          })
          if vm.FormErrors["enddate"] != "" {
          @form.Message(form.MessageProps{
          Variant: form.MessageVariantError,
          }) {
          Select a valid date
          }
          }
          }
          @button.Button(button.Props{
          Type: button.TypeSubmit,
          }) {
          Search Availability
          }
        </form>
      </div>
      if len(vm.FormErrors) > 0 {
      <div class="pt-5">
        @alert.Alert(alert.Props{Variant: alert.VariantDestructive}) {
        @icon.TriangleAlert(icon.Props{Size: 16})
        @alert.Title() {
        Error
        }
        @alert.Description() {
        Errors occurred while processing your request:
        <ul class="list-disc">
          for _,v := range vm.FormErrors {
          <li>{ v }</li>
          }
        </ul>
        }
        }
      </div>
      }
    </div>
  </div>
</div>
}
}
