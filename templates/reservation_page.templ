package templates

import (
	"github.com/axzilla/templui/component/alert"
	"github.com/axzilla/templui/component/button"
	"github.com/axzilla/templui/component/datepicker"
	"github.com/axzilla/templui/component/form"
	"github.com/axzilla/templui/icon"
	"github.com/nelsonmarro/bookings/internal/models"
	"github.com/nelsonmarro/bookings/templates/components"
)

templ headReservation() {
	<title>Make Reservations</title>
}

templ scriptsReservation() {
	<script src="/static/js/reservations.js" defer></script>
}

type ReservationPageVM struct {
	models.BaseViewModel
	models.ReservationCheck
}

func NewReservationPageVM(csrfToken string) *ReservationPageVM {
	return &ReservationPageVM{
		BaseViewModel: models.BaseViewModel{
			Form:       new(models.Form),
			FormErrors: make(models.Errors),
			CSRFToken:  csrfToken,
		},
	}
}

templ ReservationPage(vm *ReservationPageVM) {
	@MainLayout(headContact(), scriptsReservation()) {
		@components.Toast(vm.MessageType, vm.Message)
		<div class="flex flex-row justify-center items-center py-5">
			<div class="w-3/4 h-[690px]">
				<div>
					<h1 class="text-3xl font-bold text-center mt-4">Search for Availability</h1>
					<div class="w-full">
						<form method="post" data-testid="reservationFormTest" action="/reservation" class="flex flex-col space-y-4">
							<input type="hidden" name="csrf_token" value={ vm.CSRFToken }/>
							@form.Item() {
								@form.Label(form.LabelProps{
									For: "start_date",
								}) {
									Start Date
								}
								@datepicker.DatePicker(datepicker.Props{
									HasError: false,
									ID:       "start_date",
									Name:     "start_date",
									Value:    vm.StartDate,
								})
								if len(vm.Form.Errors["start_date"]) > 0 {
									@form.Message(form.MessageProps{
										Variant: form.MessageVariantError,
									}) {
										Select a valid date
									}
								}
							}
							@form.Item() {
								@form.Label(form.LabelProps{
									For: "end_date",
								}) {
									End Date
								}
								@datepicker.DatePicker(datepicker.Props{
									ID:    "end_date",
									Name:  "end_date",
									Value: vm.EndDate,
								})
								if len(vm.Form.Errors["end_date"]) > 0 {
									@form.Message(form.MessageProps{
										Variant: form.MessageVariantError,
									}) {
										Select a valid date
									}
								}
							}
							@button.Button(button.Props{
								Type: button.TypeSubmit,
							}) {
								Search Availability
							}
						</form>
					</div>
					if len(vm.Form.Errors) > 0 {
						<div class="pt-5">
							@alert.Alert(alert.Props{Variant: alert.VariantDestructive}) {
								@icon.TriangleAlert(icon.Props{Size: 16})
								@alert.Title() {
									Error
								}
								@alert.Description() {
									Errors occurred while processing your request:
									<ul class="list-disc">
										for _,v := range vm.Form.Errors {
											<li>{ v[0] }</li>
										}
									</ul>
								}
							}
						</div>
					}
				</div>
			</div>
		</div>
	}
}
