package templates

import (
	"github.com/axzilla/templui/component/button"
	"github.com/axzilla/templui/component/form"
	"github.com/axzilla/templui/component/input"
	"github.com/nelsonmarro/bookings/internal/models"
)

templ headConfirm() {
	<title>Make Reservations</title>
}

type ConfirmReservationPageVM struct {
	Reservation models.Reservation
	StartDate   string
	EndDate     string
	models.BaseViewModel
}

func NewConfirmReservationPageVM(reservation models.Reservation) *ConfirmReservationPageVM {
	return &ConfirmReservationPageVM{
		BaseViewModel: models.BaseViewModel{
			Form:      new(models.Form),
			CSRFToken: "",
		},
		Reservation: reservation,
	}
}

templ ConfirmReservationPage(vm *ConfirmReservationPageVM) {
	@MainLayout(headContact()) {
		<div class="flex flex-row justify-center items-center py-5">
			<div class="w-3/4 h-[690px]">
				<div>
					<h1 class="text-3xl font-bold text-center mt-4">Confirm Reservation</h1>
					<p><strong>Reservation Details</strong></p>
					<p>Room: { vm.Reservation.Room.RoomName }</p>
					<p>Arrival: { vm.StartDate }</p>
					<p>Departure: { vm.EndDate }</p>
					<div class="w-full pt-5">
						<form
							method="post"
							data-testid="confirm-reservation-form"
							action="/reservation/confirmation"
							class="flex flex-col space-y-4"
						>
							<input type="hidden" name="csrf_token" value={ vm.CSRFToken }/>
							<input type="hidden" name="room_id" value={ vm.Reservation.RoomID }/>
							<input type="hidden" name="start_date" value={ vm.StartDate }/>
							<input type="hidden" name="end_date" value={ vm.EndDate }/>
							@form.Item() {
								@form.Label(form.LabelProps{
									For: "first_name",
								}) {
									First Name
								}
								@input.Input(input.Props{
									HasError:    vm.Form.Errors.HasField("first_name"),
									ID:          "first_name",
									Name:        "first_name",
									Type:        input.TypeText,
									Placeholder: "First Name",
									Value:       vm.Reservation.FirstName,
								},
								)
								if len(vm.Form.Errors["first_name"]) > 0 {
									@form.Message(form.MessageProps{
										Variant: form.MessageVariantError,
									}) {
										{ vm.Form.Errors.Get("first_name") }
									}
								}
							}
							@form.Item() {
								@form.Label(form.LabelProps{
									For: "last_name",
								}) {
									Last Name
								}
								@input.Input(input.Props{
									HasError:    vm.Form.Errors.HasField("last_name"),
									ID:          "last_name",
									Name:        "last_name",
									Type:        input.TypeText,
									Placeholder: "Last Name",
									Value:       vm.Reservation.LastName,
								},
								)
								if len(vm.Form.Errors["last_name"]) > 0 {
									@form.Message(form.MessageProps{
										Variant: form.MessageVariantError,
									}) {
										{ vm.Form.Errors.Get("last_name") }
									}
								}
							}
							@form.Item() {
								@form.Label(form.LabelProps{
									For: "email",
								}) {
									Email
								}
								@input.Input(input.Props{
									HasError:    vm.Form.Errors.HasField("email"),
									ID:          "email",
									Name:        "email",
									Type:        input.TypeEmail,
									Placeholder: "Email",
									Value:       vm.Reservation.Email,
								},
								)
								if len(vm.Form.Errors["email"]) > 0 {
									@form.Message(form.MessageProps{
										Variant: form.MessageVariantError,
									}) {
										{ vm.Form.Errors.Get("email") }
									}
								}
							}
							@form.Item() {
								@form.Label(form.LabelProps{
									For: "phone_number",
								}) {
									Phone Number
								}
								@input.Input(input.Props{
									ID:          "phone_number",
									Name:        "phone_number",
									Type:        input.TypeText,
									Placeholder: "Phone Number",
									Value:       vm.Reservation.PhoneNumber,
								},
								)
							}
							@button.Button(button.Props{
								Type: button.TypeSubmit,
							}) {
								Confirm Reservation
							}
						</form>
					</div>
				</div>
			</div>
		</div>
	}
}
